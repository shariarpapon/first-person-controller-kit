//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Scripts/Player/StandardInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @StandardInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @StandardInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
        ""name"": ""StandardInputActions"",
        ""maps"": [
            {
                ""name"": ""Player"",
                ""id"": ""c171b38d-d941-4112-8440-aab0b10a88d6"",
                ""actions"": [
                    {
                        ""name"": ""Movement"",
                        ""type"": ""PassThrough"",
                        ""id"": ""62697d5c-9a67-4f85-b3f7-82185967d8c4"",
                        ""expectedControlType"": ""Vector2"",
                        ""processors"": """",
                        ""interactions"": """",
                        ""initialStateCheck"": false
                    },
                    {
                        ""name"": ""Jump"",
                        ""type"": ""Button"",
                        ""id"": ""3a681af1-386e-4cfb-999e-56d9bad8fa71"",
                        ""expectedControlType"": ""Button"",
                        ""processors"": """",
                        ""interactions"": """",
                        ""initialStateCheck"": true
                    },
                    {
                        ""name"": ""Look"",
                        ""type"": ""PassThrough"",
                        ""id"": ""c6d5caca-0b7e-48f2-9299-9387104fc707"",
                        ""expectedControlType"": ""Vector2"",
                        ""processors"": """",
                        ""interactions"": """",
                        ""initialStateCheck"": false
                    }
                ],
                ""bindings"": [
                    {
                        ""name"": """",
                        ""id"": ""bfad2225-99e9-4e38-81c3-b923462152aa"",
                        ""path"": ""<Keyboard>/space"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Jump"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": """",
                        ""id"": ""65057f54-3331-430b-92c4-2ec5c8ff32ea"",
                        ""path"": ""<Mouse>/delta"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Look"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": ""WASD"",
                        ""id"": ""886e420a-c61e-415f-87e4-fe90f26fb5a9"",
                        ""path"": ""2DVector"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Movement"",
                        ""isComposite"": true,
                        ""isPartOfComposite"": false
                    },
                    {
                        ""name"": ""up"",
                        ""id"": ""a2b452c9-41d7-4312-80c4-efa4903a17a3"",
                        ""path"": ""<Keyboard>/w"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Movement"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": ""down"",
                        ""id"": ""12f365fe-090a-4c5a-a535-d7fe665ab394"",
                        ""path"": ""<Keyboard>/s"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Movement"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": ""left"",
                        ""id"": ""2980260f-835c-4b1f-8490-b70487c09d5b"",
                        ""path"": ""<Keyboard>/a"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Movement"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    },
                    {
                        ""name"": ""right"",
                        ""id"": ""4139b344-4516-4b14-a87f-242635e64532"",
                        ""path"": ""<Keyboard>/d"",
                        ""interactions"": """",
                        ""processors"": """",
                        ""groups"": """",
                        ""action"": ""Movement"",
                        ""isComposite"": false,
                        ""isPartOfComposite"": true
                    }
                ]
            }
        ],
        ""controlSchemes"": []
    }");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Look = m_Player.FindAction("Look", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Look;
    public struct PlayerActions
    {
        private @StandardInputActions m_Wrapper;
        public PlayerActions(@StandardInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Look => m_Wrapper.m_Player_Look;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
}
